# -*- coding: utf-8 -*-
"""
Application Streamlit pour Tester l'Ajustement de Distributions Statistiques

Version am√©lior√©e pour g√©rer les donn√©es de prix historiques (ex: financiers).
Cette application permet aux utilisateurs de t√©l√©verser un fichier de donn√©es (CSV)
et de tester l'ajustement de plusieurs distributions de probabilit√© sur les prix bruts
ou sur les rendements journaliers.
"""

import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import warnings

# --- Configuration de la Page ---
st.set_page_config(
    page_title="Testeur d'Ajustement de Distributions",
    page_icon="üìä",
    layout="wide",
)

# --- Fonctions Utilitaires ---

def fit_and_test_distribution(dist_name, data):
    """
    Ajuste une distribution sp√©cifi√©e aux donn√©es et effectue un test K-S.

    Args:
        dist_name (str): Le nom de la distribution de scipy.stats.
        data (pd.Series): La s√©rie de donn√©es √† analyser.

    Returns:
        tuple: Une tuple contenant (param√®tres, stat K-S, p-value K-S).
               Retourne (None, None, None) si l'ajustement √©choue.
    """
    try:
        dist = getattr(stats, dist_name)
        
        # G√©rer les lois qui ne peuvent pas prendre de valeurs n√©gatives (communes dans les rendements)
        if dist_name in ['lognorm', 'expon', 'weibull_min', 'gamma', 'pareto']:
            if data.min() <= 0:
                return None, None, None # On ne peut pas ajuster ces lois si des valeurs sont n√©gatives ou nulles.
        
        # Pour la loi B√™ta, les donn√©es doivent √™tre mises √† l'√©chelle entre 0 et 1
        if dist_name == 'beta':
            if data.min() < 0 or data.max() > 1:
                data_scaled = (data - data.min()) / (data.max() - data.min())
                params = dist.fit(data_scaled, floc=0, fscale=1) # floc/fscale pour fixer l'intervalle √† [0,1]
            else:
                params = dist.fit(data, floc=0, fscale=1)
        else:
            params = dist.fit(data)

        # Effectuer le test de Kolmogorov-Smirnov
        D, p_value = stats.kstest(data, dist_name, args=params)

        return params, D, p_value
    except Exception:
        # G√©rer silencieusement les erreurs d'ajustement
        return None, None, None

def plot_distribution_fit(data, dist_name, params, analysis_type):
    """
    G√©n√®re un graphique comparant l'histogramme des donn√©es avec la PDF de la distribution ajust√©e.
    """
    fig, ax = plt.subplots(figsize=(10, 6))

    ax.hist(data, bins=50, density=True, alpha=0.7, label=f'Histogramme ({analysis_type})')

    dist = getattr(stats, dist_name)
    x = np.linspace(data.min(), data.max(), 1000)
    
    # Gestion sp√©ciale pour la loi B√™ta si les donn√©es ont √©t√© mises √† l'√©chelle
    if dist_name == 'beta' and (data.min() < 0 or data.max() > 1):
        x_scaled = (x - data.min()) / (data.max() - data.min())
        pdf = dist.pdf(x_scaled, *params)
        # Il faut ajuster la densit√© √† la nouvelle √©chelle
        pdf = pdf / (data.max() - data.min())
        ax.plot(x, pdf, 'r-', lw=2, label=f'PDF de la Loi {dist_name.capitalize()}')
    else:
        pdf = dist.pdf(x, *params)
        ax.plot(x, pdf, 'r-', lw=2, label=f'PDF de la Loi {dist_name.capitalize()}')


    ax.set_title(f'Ajustement de la Loi {dist_name.capitalize()} sur les {analysis_type}', fontsize=16)
    ax.set_xlabel('Valeur')
    ax.set_ylabel('Densit√©')
    ax.legend()
    st.pyplot(fig)
    plt.close(fig)

# --- Interface Utilisateur Streamlit ---

st.title("üìä Testeur d'Ajustement de Lois Statistiques")
st.markdown("""
Cette application vous aide √† d√©terminer quelle loi statistique correspond le mieux √† vos donn√©es.
Sp√©cialement adapt√©e pour les **donn√©es financi√®res historiques**.
""")

# --- Barre Lat√©rale pour les Entr√©es ---
with st.sidebar:
    st.header("1. Param√®tres des Donn√©es")
    uploaded_file = st.file_uploader(
        "T√©l√©versez votre fichier CSV (ex: HistoricalPrices.csv)",
        type="csv",
        help="Le fichier doit contenir une colonne 'Date' et des colonnes num√©riques (Open, High, Low, Close...)."
    )

    analysis_type = "Prix Bruts" # Valeur par d√©faut

    if uploaded_file is not None:
        try:
            # Essayer de parser la colonne 'Date' directement
            df = pd.read_csv(uploaded_file, parse_dates=['Date'], index_col='Date')
            df.sort_index(inplace=True)
            st.success("Fichier t√©l√©vers√© et colonne 'Date' reconnue !")

            numeric_columns = df.select_dtypes(include=np.number).columns.tolist()
            if not numeric_columns:
                st.error("Aucune colonne num√©rique trouv√©e dans le fichier CSV.")
                st.stop()

            selected_column = st.selectbox(
                "Choisissez la colonne de donn√©es √† analyser",
                options=numeric_columns,
                index=numeric_columns.index('Close') if 'Close' in numeric_columns else 0
            )
            
            st.header("2. Type d'Analyse")
            analysis_type = st.radio(
                "Que souhaitez-vous analyser ?",
                ('Prix Bruts', 'Rendements Journaliers'),
                help="Les rendements sont souvent plus pertinents pour l'analyse statistique en finance."
            )

        except Exception as e:
            st.error(f"Erreur √† la lecture du fichier : {e}. Assurez-vous qu'il y a bien une colonne 'Date'.")
            st.stop()

    st.header("3. Lois √† Tester")
    available_distributions = {
        "Normale": "norm",
        "Log-Normale": "lognorm",
        "Exponentielle": "expon",
        "Weibull Min": "weibull_min",
        "Gamma": "gamma",
        "B√™ta": "beta",
        "Uniforme": "uniform",
        "Pareto": "pareto"
    }
    
    selected_distributions_names = st.multiselect(
        "S√©lectionnez les lois √† tester",
        options=list(available_distributions.keys()),
        default=list(available_distributions.keys())
    )
    
    distributions_to_test = {name: code for name, code in available_distributions.items() if name in selected_distributions_names}


# --- Zone Principale pour les R√©sultats ---
if 'uploaded_file' in locals() and uploaded_file is not None and 'selected_column' in locals():
    
    data_raw = df[selected_column].dropna()

    if analysis_type == 'Rendements Journaliers':
        data_to_analyze = data_raw.pct_change().dropna()
        st.header(f"Analyse des Rendements Journaliers de : `{selected_column}`")
    else:
        data_to_analyze = data_raw
        st.header(f"Analyse des Prix Bruts de : `{selected_column}`")

    if data_to_analyze.empty or len(data_to_analyze) < 10:
        st.warning(f"La s√©rie de donn√©es ({analysis_type}) contient moins de 10 points. Analyse impossible.")
        st.stop()
        
    with st.expander("Aper√ßu des donn√©es et statistiques descriptives"):
        st.dataframe(data_to_analyze.head())
        st.write(data_to_analyze.describe())

    st.header("R√©sultats de l'Ajustement des Distributions")

    results = []
    with warnings.catch_warnings():
        warnings.filterwarnings('ignore', category=RuntimeWarning)
        
        for pretty_name, dist_code in distributions_to_test.items():
            
            with st.spinner(f"Ajustement en cours pour la loi {pretty_name}..."):
                params, D_stat, p_value = fit_and_test_distribution(dist_code, data_to_analyze)
            
            if params is not None:
                st.subheader(f"Test de la Loi {pretty_name}")
                results.append({
                    "Loi": pretty_name,
                    "Statistique K-S (D)": D_stat,
                    "P-value": p_value,
                    "Param√®tres ajust√©s": params
                })
                
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.metric(label="Statistique K-S (D)", value=f"{D_stat:.4f}")
                    st.metric(label="P-value du test K-S", value=f"{p_value:.4f}")
                    if p_value < 0.05:
                        st.warning("""**Interpr√©tation :** La p-value est faible (< 0.05). L'hypoth√®se que les donn√©es suivent cette loi est rejet√©e.""")
                    else:
                        st.success("""**Interpr√©tation :** La p-value est √©lev√©e (>= 0.05). L'ajustement est plausible.""")
                
                with col2:
                    plot_distribution_fit(data_to_analyze, dist_code, params, analysis_type)
            else:
                 st.subheader(f"Test de la Loi {pretty_name}")
                 st.info(f"Impossible d'ajuster la loi {pretty_name}. Les donn√©es (ex: n√©gatives) ne sont peut-√™tre pas compatibles avec cette loi.")
            
            st.divider()

    if results:
        st.header("Tableau de Synth√®se")
        st.info("""
        **Comment lire ce tableau ?**
        - **P-value :** Une p-value √©lev√©e (proche de 1) sugg√®re un bon ajustement. C'est souvent le crit√®re le plus important.
        - **Statistique K-S (D) :** Une valeur faible (proche de 0) sugg√®re un bon ajustement.
        **La meilleure loi est g√©n√©ralement celle avec la p-value la plus √©lev√©e et la statistique K-S la plus faible.**
        """)
        
        results_df = pd.DataFrame(results).sort_values(by=["P-value", "Statistique K-S (D)"], ascending=[False, True]).set_index("Loi")
        
        st.dataframe(
            results_df.style.background_gradient(cmap='Greens', subset=['P-value'])
                             .background_gradient(cmap='Reds_r', subset=['Statistique K-S (D)'])
        )
    else:
        st.warning("Aucun r√©sultat √† afficher. Cela peut arriver si aucune des lois s√©lectionn√©es n'est compatible avec vos donn√©es (par exemple, des donn√©es avec des valeurs n√©gatives pour des lois qui ne les supportent pas).")

else:
    st.info("Veuillez t√©l√©verser un fichier CSV et s√©lectionner une colonne pour commencer l'analyse.")
