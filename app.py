# -*- coding: utf-8 -*-
"""
Application Streamlit pour Tester l'Ajustement de Distributions Statistiques

Cette application permet aux utilisateurs de t√©l√©verser un fichier de donn√©es (CSV)
et de tester l'ajustement de plusieurs distributions de probabilit√© √† leurs donn√©es.
Elle calcule les param√®tres pour chaque distribution, effectue un test de Kolmogorov-Smirnov (K-S)
pour √©valuer la qualit√© de l'ajustement, et visualise l'histogramme des donn√©es par rapport
√† la fonction de densit√© de probabilit√© (PDF) de chaque distribution ajust√©e.
"""

import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import warnings

# --- Configuration de la Page ---
st.set_page_config(
    page_title="Testeur d'Ajustement de Distributions",
    page_icon="üìä",
    layout="wide",
)

# --- Fonctions Utilitaires ---

def fit_and_test_distribution(dist_name, data):
    """
    Ajuste une distribution sp√©cifi√©e aux donn√©es et effectue un test K-S.

    Args:
        dist_name (str): Le nom de la distribution de scipy.stats.
        data (pd.Series): La s√©rie de donn√©es √† analyser.

    Returns:
        tuple: Une tuple contenant (param√®tres, stat K-S, p-value K-S).
               Retourne (None, None, None) si l'ajustement √©choue.
    """
    try:
        # R√©cup√©rer l'objet de distribution de scipy.stats
        dist = getattr(stats, dist_name)

        # Ajuster la distribution aux donn√©es pour obtenir les param√®tres
        # Pour la loi B√™ta, les donn√©es doivent √™tre mises √† l'√©chelle entre 0 et 1
        if dist_name == 'beta':
            if data.min() < 0 or data.max() > 1:
                # Mise √† l'√©chelle Min-Max simple
                data_scaled = (data - data.min()) / (data.max() - data.min())
                params = dist.fit(data_scaled)
            else:
                params = dist.fit(data)
        else:
            params = dist.fit(data)

        # Effectuer le test de Kolmogorov-Smirnov
        D, p_value = stats.kstest(data, dist_name, args=params)

        return params, D, p_value
    except Exception as e:
        # G√©rer les erreurs potentielles lors de l'ajustement (par exemple, donn√©es non valides pour une loi)
        st.warning(f"Impossible d'ajuster la loi {dist_name}. Erreur : {e}")
        return None, None, None

def plot_distribution_fit(data, dist_name, params):
    """
    G√©n√®re un graphique comparant l'histogramme des donn√©es avec la PDF de la distribution ajust√©e.

    Args:
        data (pd.Series): La s√©rie de donn√©es.
        dist_name (str): Le nom de la distribution.
        params (tuple): Les param√®tres de la distribution ajust√©e.
    """
    fig, ax = plt.subplots(figsize=(10, 6))

    # Tracer l'histogramme des donn√©es (densit√©)
    ax.hist(data, bins=30, density=True, alpha=0.6, label='Histogramme des Donn√©es')

    # G√©n√©rer la PDF de la distribution ajust√©e
    dist = getattr(stats, dist_name)
    x = np.linspace(data.min(), data.max(), 1000)

    # Si la loi est B√™ta, les donn√©es d'origine ont peut-√™tre √©t√© mises √† l'√©chelle
    if dist_name == 'beta' and (data.min() < 0 or data.max() > 1):
        # La PDF est calcul√©e sur [0, 1] puis l'axe des x est remis √† l'√©chelle
        x_scaled = np.linspace(0, 1, 1000)
        pdf = dist.pdf(x_scaled, *params)
        ax.plot(x, pdf, 'r-', lw=2, label=f'PDF de la Loi {dist_name.capitalize()}')
    else:
        pdf = dist.pdf(x, *params)
        ax.plot(x, pdf, 'r-', lw=2, label=f'PDF de la Loi {dist_name.capitalize()}')

    # Mise en forme du graphique
    ax.set_title(f'Ajustement de la Loi {dist_name.capitalize()}', fontsize=16)
    ax.set_xlabel('Valeur')
    ax.set_ylabel('Densit√©')
    ax.legend()
    st.pyplot(fig)
    plt.close(fig) # Fermer la figure pour lib√©rer la m√©moire

# --- Interface Utilisateur Streamlit ---

st.title("üìä Testeur d'Ajustement de Lois Statistiques")
st.markdown("""
Cette application vous aide √† d√©terminer quelle loi statistique correspond le mieux √† votre s√©rie de donn√©es historiques.
T√©l√©versez un fichier CSV, s√©lectionnez la colonne √† analyser, et l'application testera 8 lois diff√©rentes.
""")

# --- Barre Lat√©rale pour les Entr√©es ---
with st.sidebar:
    st.header("1. Param√®tres des Donn√©es")
    uploaded_file = st.file_uploader(
        "T√©l√©versez votre fichier CSV",
        type="csv",
        help="Le fichier doit contenir au moins une colonne de donn√©es num√©riques."
    )

    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.success("Fichier t√©l√©vers√© avec succ√®s !")

            numeric_columns = df.select_dtypes(include=np.number).columns.tolist()
            if not numeric_columns:
                st.error("Aucune colonne num√©rique trouv√©e dans le fichier CSV.")
                st.stop()

            selected_column = st.selectbox(
                "Choisissez la colonne de donn√©es √† analyser",
                options=numeric_columns
            )
        except Exception as e:
            st.error(f"Erreur √† la lecture du fichier : {e}")
            st.stop()

    st.header("2. Lois √† Tester")
    # Liste des distributions √† tester
    available_distributions = {
        "Normale": "norm",
        "Log-Normale": "lognorm",
        "Exponentielle": "expon",
        "Weibull Min": "weibull_min",
        "Gamma": "gamma",
        "B√™ta": "beta",
        "Uniforme": "uniform",
        "Pareto": "pareto"
    }
    
    selected_distributions_names = st.multiselect(
        "S√©lectionnez les lois √† tester",
        options=list(available_distributions.keys()),
        default=list(available_distributions.keys())
    )
    
    distributions_to_test = {name: code for name, code in available_distributions.items() if name in selected_distributions_names}


# --- Zone Principale pour les R√©sultats ---
if 'uploaded_file' in locals() and uploaded_file is not None and 'selected_column' in locals():
    st.header(f"Analyse de la colonne : `{selected_column}`")
    data = df[selected_column].dropna()

    if data.empty or len(data) < 5:
        st.warning("La colonne s√©lectionn√©e contient moins de 5 points de donn√©es apr√®s suppression des valeurs manquantes. Analyse impossible.")
        st.stop()
        
    # Afficher un aper√ßu des donn√©es
    with st.expander("Aper√ßu des donn√©es et statistiques descriptives"):
        st.dataframe(data.head())
        st.write(data.describe())

    st.header("R√©sultats de l'Ajustement des Distributions")

    results = []
    # Ignorer les avertissements de runtime de SciPy qui peuvent survenir lors de l'ajustement
    with warnings.catch_warnings():
        warnings.filterwarnings('ignore', category=RuntimeWarning)
        
        for pretty_name, dist_code in distributions_to_test.items():
            st.subheader(f"Test de la Loi {pretty_name}")
            
            with st.spinner(f"Ajustement en cours pour la loi {pretty_name}..."):
                params, D_stat, p_value = fit_and_test_distribution(dist_code, data)
            
            if params is not None:
                results.append({
                    "Loi": pretty_name,
                    "Statistique K-S (D)": D_stat,
                    "P-value": p_value,
                    "Param√®tres ajust√©s": params
                })
                
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.metric(label="Statistique K-S (D)", value=f"{D_stat:.4f}")
                    st.metric(label="P-value du test K-S", value=f"{p_value:.4f}")
                    st.info(f"**Param√®tres :** {[f'{p:.2f}' for p in params]}")
                    if p_value < 0.05:
                        st.warning("""**Interpr√©tation :** La p-value est faible (< 0.05). L'hypoth√®se que les donn√©es suivent cette loi est rejet√©e. L'ajustement n'est pas bon.""")
                    else:
                        st.success("""**Interpr√©tation :** La p-value est √©lev√©e (>= 0.05). On ne peut pas rejeter l'hypoth√®se que les donn√©es suivent cette loi. L'ajustement est plausible.""")
                
                with col2:
                    plot_distribution_fit(data, dist_code, params)
            
            st.divider()

    # --- Synth√®se des R√©sultats ---
    if results:
        st.header("Tableau de Synth√®se")
        st.info("""
        **Comment lire ce tableau ?**
        - **P-value :** Une p-value √©lev√©e (proche de 1) sugg√®re un bon ajustement. C'est souvent le crit√®re le plus important.
        - **Statistique K-S (D) :** Une valeur faible (proche de 0) sugg√®re un bon ajustement. Elle mesure la distance maximale entre la distribution de vos donn√©es et la distribution test√©e.
        
        **La meilleure loi est g√©n√©ralement celle avec la p-value la plus √©lev√©e et la statistique K-S la plus faible.**
        """)
        
        results_df = pd.DataFrame(results)
        # Trier par p-value (d√©croissant) puis par statistique K-S (croissant)
        results_df = results_df.sort_values(by=["P-value", "Statistique K-S (D)"], ascending=[False, True])
        results_df = results_df.set_index("Loi")
        
        st.dataframe(
            results_df.style.background_gradient(cmap='Greens', subset=['P-value'])
                             .background_gradient(cmap='Reds_r', subset=['Statistique K-S (D)'])
        )
    else:
        st.warning("Aucun r√©sultat √† afficher. V√©rifiez vos donn√©es ou les lois s√©lectionn√©es.")

else:
    st.info("Veuillez t√©l√©verser un fichier CSV et s√©lectionner une colonne pour commencer l'analyse.")
